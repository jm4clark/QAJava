import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.stream.Collectors;

public class Library {
	ArrayList<Media> listOfMedia = new ArrayList<Media>();	
	ArrayList<User> listOfUsers = new ArrayList<User>();
	
	public void addUser(User u) {
		listOfUsers.add(u);
	}
	public void addUsers(ArrayList<User> list)	{
		listOfUsers.addAll(list);
	}
	public void removeUserByID(int ID) {
		listOfUsers.removeIf(i -> i.getID() == ID);
	}
	
	public void checkOut(Media media, User user) {
		if(media.isCheckedOut()) {
			System.out.println("Already checked out.");
		}
		if(user.getWithdrawals().stream().count() < user.getMaxWithdraws()) {
			media.setCheckedOut(true);
			user.addWithdrawal(media);
		}
		else {
			System.out.println("User has already checked out the maximum amount.");
		}
	}
	public void checkIn(Media media) {
		if(!media.isCheckedOut()) {
			System.out.println("Already checked in.");
		}
		media.setCheckedOut(false);
	}
	
	//fix this
	public ArrayList<Media> sortMediaBy(String field, boolean asc) 
	{
		
		
//		Media m = new Media();
//		Field f = m.getClass().getDeclaredField(field);
//		return (ArrayList<Media>) listOfMedia.stream()
//				.sorted(Comparator.comparing()))
//				.collect(Collectors.toList());
		
		//field.toLowerCase();
//		if(asc)
//			return (ArrayList<Media>) listOfMedia.stream()
//					.sorted(Comparator.comparing(i->i.getDeclaredField(field).toString()))
//					.collect(Collectors.toList());
		return null;
	}
	
	public ArrayList<Media> sortMediaByName(boolean asc) {
		if (asc)
			return (ArrayList<Media>) listOfMedia.stream()
					.sorted(Comparator.comparing(Media::getTitle))
					.collect(Collectors.toList());
		
		return (ArrayList<Media>) listOfMedia.stream()
				.sorted(Comparator.comparing(Media::getTitle).reversed())
				.collect(Collectors.toList());
	}
	
	public ArrayList<Media> sortSelectByName(String selection, boolean asc) {
		if (asc)
			return (ArrayList<Media>) listOfMedia.stream()
					.filter(i->i.getType().equals(selection))
					.sorted(Comparator.comparing(Media::getTitle))
					.collect(Collectors.toList());
		
		return (ArrayList<Media>) listOfMedia.stream()
				.filter(i->i.getType().equals(selection))
				.sorted(Comparator.comparing(Media::getTitle).reversed())
				.collect(Collectors.toList());
	}
	
	public ArrayList<Media> sortSelectByType(String type, boolean asc) {
		if(asc)
			return (ArrayList<Media>) listOfMedia.stream()
					.filter(i->i.getType().equals(type))
					.sorted(Comparator.comparing(Media::getType))
					.collect(Collectors.toList());
	
		return (ArrayList<Media>) listOfMedia.stream()
				.filter(i->i.getType().equals(type))
				.sorted(Comparator.comparing(Media::getType).reversed())
				.collect(Collectors.toList());
	}
	
	public void addMedia(Media media) {
		listOfMedia.add(media);
	}
	
	public ArrayList<Media> getAllMedia(){
		return (ArrayList<Media>) listOfMedia.stream()
				.collect(Collectors.toList());
	}
	
	
	public void registerUser(String name, int age, boolean hasLibraryCard)	{
		User user = new User(name, age, hasLibraryCard);
		listOfUsers.add(user);
	}
	
	public void deleteUser(int ID)	{
		listOfUsers.removeIf(i->i.getID() == ID);
	}
	
	public void deleteUser(String name)	{
		listOfUsers.removeIf(i->i.getName().equals(name));
	}
}
